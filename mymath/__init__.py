# -*- coding: utf-8 -*-
"""
@author: Liu.Jinbao
@contact: liu.jinbao@outlook.com
@time: 02.July.2023
"""
from math import pi, sin, cos, factorial, log, sqrt

import numpy as np


def integrate_by_DCT(f, N):
    a = []
    n = np.arange(1, int(N/2))
    tmp1 = [f(cos(n*pi/N)) + f(-cos(n*pi/N)) for n in range(1, int(N/2))]
    for k in range(int(N/2) + 1):
        temp = np.dot(tmp1, np.cos(n*pi/N*2*k)) + f(0)*(-1)**k + (f(-1) + f(1))/2
        a.append(temp*2/N)
    coef = [1] + [2/(1 - 4*k**2) for k in range(1, int(N/2))] + [1/(1 - N**2)]
    return np.dot(a, coef)


def Gauss2D(r, z, r_fwhm, z_fwhm, _min, _max):
    cst1 = 4*log(2)
    return _min + (_max - _min)*np.exp(-cst1*(r/r_fwhm)**2 - cst1*(z/z_fwhm)**2)


def ls_index(l, s):
    return factorial(s + 1)/2*(1 - (1 - (-1)**(l + 1))/2/(l + 1))


def coeff1(p, q):
    if (p, q) == (0, 0):
        return [[80/3, (1, 1), (1, 1)],
                [8, (0, 2), (2, 2)]]
    elif (p, q) == (0, 1):
        return [[280/3, (1, 2), (1, 1)],
                [-112/3, (1, 2), (1, 2)],
                [28, (0, 3), (2, 2)],
                [-8, (0, 3), (2, 3)]]
    elif (p, q) == (1, 1):
        return [[560/3, (3, 1), (1, 1)],
                [980/3, (1, 3), (1, 1)],
                [-784/3, (1, 3), (1, 2)],
                [128/3, (1, 3), (1, 3)],
                [308/3, (2, 2), (2, 2)],
                [294/3, (0, 4), (2, 2)],
                [-56, (0, 4), (2, 3)],
                [8, (0, 4), (2, 4)],
                [16, (1, 3), (3, 3)]]
    else:
        raise Exception("")


def coeff2(p, q):
    if (p, q) == (0, 0):
        return [[-80/3, (1, 1), (1, 1)],
                [8, (1, 1), (2, 2)]]
    elif (p, q) == (0, 1):
        return [[-280/3, (2, 1), (1, 1)],
                [112/3, (2, 1), (1, 2)],
                [28, (2, 1), (2, 2)],
                [-8, (2, 1), (2, 3)]]
    elif (p, q) == (1, 1):
        return [[-1540/3, (2, 2), (1, 1)],
                [784/3, (2, 2), (1, 2)],
                [-128/3, (2, 2), (1, 3)],
                [602/3, (2, 2), (2, 2)],
                [-56, (2, 2), (2, 3)],
                [8, (2, 2), (2, 4)],
                [-16, (2, 2), (3, 3)]]
    else:
        raise Exception("")


def coeff3(p, q):
    match p, q:
        case 0, 0:
            return [[8, (0, 1), (1, 1)]]
        case 0, 1:
            return [[20, (0, 2), (1, 1)],
                    [-8, 0, 2, 1, 2]]
        case 0, 2:
            return [[35, 0, 3, 1, 1],
                    [-8, 0, 2, 1, 2]]
        case 0, 3:
            return [[105/2, 0, 4, 1, 1],
                    [-63, 0, 4, 1, 2],
                    [18, 0, 4, 1, 3],
                    [-4/3, 0, 4, 1, 4]]
        case 0, 4:
            return [[1155/16, 0, 5, 1, 1],
                    [-231/2, 0, 5, 1, 2],
                    [99/2, 0, 5, 1, 3],
                    [-22/3, 0, 5, 1, 4],
                    [1/3, 0, 5, 1, 5]]
        case 0, 5:
            return [[3003/32, 0, 6, 1, 1],
                    [-3003/16, 0, 6, 1, 2],
                    [429/4, 0, 6, 1, 3],
                    [-143/6, 0, 6, 1, 4],
                    [13/6, 0, 6, 1, 5],
                    [-1/15, 0, 6, 1, 6]]
        case 1, 1:
            return [[60, 2, 1, 1, 1],
                    [50, 0, 3, 1, 1],
                    [-40, 0, 3, 1, 2],
                    [8, 0, 3, 1, 3],
                    [16, 1, 2, 2, 2]]
        case 1, 2:
            return [[210, 2, 2, 1, 1],
                    [175/2, 0, 4, 1, 1],
                    [-84, 2, 2, 1, 2],
                    [-105, 0, 4, 1, 2],
                    [38, 0, 4, 1, 3],
                    [-4, 0, 4, 1, 4],
                    [56, 1, 3, 2, 2],
                    [-16, 1, 3, 2, 3]]
